assemblyMergeStrategy in assembly := {
  case PathList("io", "netty", xs @ _ *) => MergeStrategy.first
  case meta(_)                           => MergeStrategy.discard
  case "BUILD"                           => MergeStrategy.discard
  case x =>
    val oldStrategy = (assemblyMergeStrategy in assembly).value
    oldStrategy(x)
}

test in assembly := {}

lazy val meta = """META.INF(.)*""".r

enablePlugins(GatlingPlugin, JavaAppPackaging, UniversalDeployPlugin)

name := "gatling-thrift-example"

assemblyJarName in assembly := "gatling-thrift-example.jar"

mainClass in assembly := Some("simulation.ThriftSimulationMain")

mappings in Universal := {
  val universalMappings = (mappings in Universal).value
  val fatJar = (assembly in Compile).value
  val filtered = universalMappings.filter {
    case (file, name) => !name.endsWith(".jar")
  }
  filtered :+ (fatJar -> ("lib/" + fatJar.getName))
}

scriptClasspath := Seq((assemblyJarName in assembly).value)

publish := (publish in Universal).value

publishLocal := (publishLocal in Universal).value